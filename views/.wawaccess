wawaccess do
   
  ######################################################################## MATCHERS 
  
  # Recognizes existing folders only
  matcher :directory do
    File.directory?(File.join(folder, req_path))
  end
  
  # Recognizes any downloadable file (extension match and file
  # exists)
  matcher :downloadable do
    req_path =~ /\.(js|css|tar|gz|zip|jpg|gif|png|bmp|pdf)$/ and
    File.exists?(File.join(folder, req_path))
  end
  
  # Recognizes pages that can be composed
  matcher :composable do
    ['wtpl', 'whtml'].any?{|ext|
      File.exists?(File.join(folder, "#{req_path}.#{ext}"))
    }
  end
  
  ######################################################################## SERVICE RULES 
  
  # REWRITING: / => /index
  # REWRITING: /folder_1/.../folder_n => /folder_1/.../folder_n/index
  match directory do
    apply "#{req_path}/index"
  end
  
  # RULE: downloadable -> static service
  match downloadable do
    static
  end
  
  # RULE: composable -> composed
  match composable do
    # Find the source file
    source_file = if File.exists?(File.join(folder, "#{req_path}.whtml"))
      File.join(folder, "#{req_path}.whtml")
    elsif File.exists?(File.join(folder, "#{req_path}.wtpl"))
      File.join(folder, "#{req_path}.wtpl")
    end
    
    # Create the css and js files
    current_folder = File.dirname(source_file)
    stylesheets, scripts, classes = [], [], []
    side_file = nil
    until current_folder == File.dirname(folder)
      # find css stylesheets
      Dir[File.join(current_folder, "css", "*.css")].each do |file|
        stylesheets << file[folder.length..-1]
      end

      # find scripts
      Dir[File.join(current_folder, "js", "*.js")].each do |file|
        scripts << file[folder.length..-1]
      end

      # extend css classes
      classes << File.basename(current_folder)
      
      if side_file.nil? and File.exists?(File.join(current_folder, "side.wtpl"))
        side_file = File.join(current_folder, "side.wtpl")
      end
      
      # continue
      current_folder = File.dirname(current_folder)
    end
    
    # Create the wlang context now
    context  = {:base           => "#{Waw.config.web_base}#{req_path}",
                :normalized_url => req_path,
                :page_name      => File.basename(req_path),
                :stylesheets    => stylesheets.reverse,
                :scripts        => scripts.reverse,
                :classes        => classes}
    
    # Set the page contents
    context[:body] = case File.extname(source_file)
      when '.whtml'
        File.read(source_file)
      when '.wtpl'
        WLang::file_instantiate(source_file, default_wlang_context.merge(context))
      else 
        ""
    end
    
    # Set the right menu
    unless side_file.nil?
      context[:side] = WLang::file_instantiate(side_file, default_wlang_context.merge(context))
    end
    
    # Set the page title
    context[:title] = if context[:body] =~ /^<h2>(.*?)<\/h2>/
       $1.gsub("&mdash;", "-")
    else
      "UCLouvain ACM Student Chapter"
    end
    
    template = "templates/layout.wtpl"
    wlang template, context
  end
  
  ######################################################################## REWRITING RULES 
  
  match 'activites' do
    apply "activites/2009-2010"
  end
  match 'securite-vie-privee' do
    apply "activites/2009-2010/conferences/securite-vie-privee"
  end
  match 'olympiades' do
    apply "activites/2009-2010/olympiades"
  end
  match 'scienceinfuse' do
    apply "activites/2009-2010/scienceinfuse"
  end

  ######################################################################## MATCH ALL RULES
  
  # RULE: true -> 404 error
  match true do
    apply "404", 404
  end
  
end