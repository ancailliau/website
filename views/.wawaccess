wawaccess do
    
  #
  # Matches the root site index, '/'
  #
  # This request is directly redirected to /index (see next rule)
  #
  match root do
    apply "index"
  end
  
  # 
  # Matches all existing files. Accesses to standard downloadable 
  # files are granted. Others ar immediately denied.
  #
  match file do
    if File.directory?(served_file)
      apply "#{served_file}/index"
    elsif served_file =~ /\.(js|css|tar|gz|zip|jpg|gif|png|bmp|pdf)$/
      static
    else
      deny
    end
  end
  
  #
  # Matches everything else
  #
  match /.*[a-z0-9A-Z\-]+$/ do |url|
    url = "#{url}/index" if File.directory?(File.join(folder, url))

    # Find the source file
    source_file = if File.exists?(File.join(folder, "#{url}.whtml"))
      File.join(folder, "#{url}.whtml")
    elsif File.exists?(File.join(folder, "#{url}.wtpl"))
      File.join(folder, "#{url}.wtpl")
    else
      File.join(folder, "404.whtml")
    end
    
    # Create the css and js files
    current_folder = File.dirname(source_file)
    stylesheets, scripts, classes = [], [], []
    side_file = nil
    until current_folder == File.dirname(folder)
      # find css stylesheets
      Dir[File.join(current_folder, "css", "*.css")].each do |file|
        stylesheets << file[folder.length..-1]
      end

      # find scripts
      Dir[File.join(current_folder, "js", "*.js")].each do |file|
        scripts << file[folder.length..-1]
      end

      # extend css classes
      classes << File.basename(current_folder)
      
      if side_file.nil? and File.exists?(File.join(current_folder, "side.wtpl"))
        side_file = File.join(current_folder, "side.wtpl")
      end
      
      # continue
      current_folder = File.dirname(current_folder)
    end
    
    # Create the wlang context now
    context  = {:theclass       => (url == "index" ? "index" : "other"),
                :normalized_url => url,
                :stylesheets    => stylesheets,
                :scripts        => scripts,
                :classes        => classes}
    
    # Set the page contents
    context[:body] = case File.extname(source_file)
      when '.whtml'
        File.read(source_file)
      when '.wtpl'
        WLang::file_instantiate(source_file, default_wlang_context.merge(context))
      else 
        ""
    end
    
    # Set the right menu
    context[:side] = unless side_file.nil?
      WLang::file_instantiate(side_file, default_wlang_context.merge(context))
    else
      ""
    end
    
    # Set the page title
    context[:title] = if context[:body] =~ /^<h2>(.*?)<\/h2>/
       $1.gsub("&mdash;", "-")
    else
      "ACM Student Chapter"
    end
    
    template = "templates/layout.wtpl"
    wlang template, context
  end
  
  # 
  # Matches everything else and returns a friendly 404 page.
  #
  match true do
    apply "404", 404
  end
  
end