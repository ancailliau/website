requirement("Users should be able to take contact with the organisers easily") {
  
  args = {:mail       => "test-user@acmscw.be",
          :subject    => "This is my subject", 
          :message    => "This is my message"}
  AcmScW::Tools::MailServer.clean("info@uclouvain.acm-sc.be")
  
  therefore("A contact link should be proposed on the index page") {
    go       index_page
    i_see    link(:href => "/contact")
  }
  
  therefore("Following this link should lead to a friendly contact page") {
    go       "contact"
    i_see    "<!-- pages/contact.wtpl -->"
    i_see    form(:action => controllers.main.send_message)
  }
  
  therefore("Submitting the form should send an e-mail to the organisers") {
    i_submit form(:action => controllers.main.send_message), with(args)
    i_see    messages.contact_ok
    #assert   mailbox("info@uclouvain.acm-sc.be").has_new_mail?
    
    # by_the_way {
    #   contents = mailbox.readmail("info@uclouvain.acm-sc.be")
    #   assert contents =~ /This is my message/, "Message is in the mail"
    #   assert contents =~ /^Subject: This is my subject$/, "With the correct subject"
    #   assert contents =~ /^From: test-user@acmscw.be$/, "From the correct user"
    #   assert contents =~ /^To: info@uclouvain.acm-sc.be$/, "To the correct user"
    # }
  }
  
  # Checks that it blocks without message
  # result = invoke_json_service("/webserv/main/send_message", args.keep(:mail, :subject))
  # assert_equal ["validation-ko", ["missing_message"]], result
  # result = invoke_json_service("/webserv/main/send_message", args.keep(:mail, :subject, :message => "               "))
  # assert_equal ["validation-ko", ["missing_message"]], result

}
